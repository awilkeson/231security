Title         : Homework 2
Title Note    : Ashley Wilkeson
Author        : 
Email         : 
Doc class     : [11pt]article

~ MathDefs
\newcommand{\jacobi}[2]{\ensuremath{\left(\frac{#1}{#2}\right)}}
~


[TITLE]

# What are the types of the following values?
a. [’a’,’b’,’c’]\
  [Char]

- (’a’,’b’,’c’)\
  (Char, Char, Char)

- [(False,’0’),(True,’1’)]\
  [(Bool, Char)]

- ([False,True],[’0’,’1’])\
  ([Bool], [Char])

- [tail,init,reverse]\
  [[a]→[a]]



# What are the types of the following functions?
a. second xs     = head (tail xs)\
  [a] → a
- swap (x,y)    = (y,x)\
 (a,b) → (b,a)

- pair x y      = (x,y)\
  a → b → (a,b)

- double x      = x*2\
  Num a ⇒ a → a

- palindrome xs = reverse xs == xs\
  Eq a ⇒ [a] → Bool

- twice f x     = f (f x)\
  (a → a) → a → a
\

# Types and Typeclasses

a. What functions define the typeclasses `Real` and `Integral`,
respectively? Read the documentation (find them either
through [Hayoo](http://hayoo.fh-wedel.de)
or [Hoogle](https://www.haskell.org/hoogle/)) of these functions and try
invoking each of them in `ghci`. Show your trials and explain in English
what the functions do.\

    Functions allow computers to repeat a task without having to retype the\
    steps each time you want to use the function. It is a mapping from one variable\
    type to values of another type. 

- What are the example types that are instances of `Real` and `Integral`,
  respectively. Try invoking the `Real` and `Integral` functions on
  values of the example types that you give.\
  
  Real:\
  Integral: 7 'div' 2 which would give you 3
  
- Define a function `f` as follows:
``` haskell
f x = toRational $ rem x 5
```
  i. What is `f`'s type?\
   F's type would be a curried function. 
   
  - Describe how would your Haskell compiler/interpreter infer `f`'s type.\
  The Haskell compiler/interpreter would infer f's type by using the fuction\
  toRational and rem. 
\

# Functions

a. Redefine the following version of (&&) using _conditionals_ rather than patterns:
``` haskell
  True && True = True
  _    && _    = False
```
``` haskell
a ∧ b = if a then
              if b then True else False
           else
              False
```
- Give three possible definitions for the logical or operator (`||`)
   using pattern matching.\
   1.(||) :: Bool → Bool → Bool \
   2.xor :: Bool → Bool → Bool \
   3.-- import Prelude hiding ((||), ...)
   

- What does the `init` function in Prelude[^prelude] do? Define `init` in
  terms of functions `length` and `take`.\
  The init function in Prelude take the input and uses it as an integer in length it analyzes
  the length of in the function and take takes the input as an integer.
  

[^prelude]: Prelude is a standard module loaded by default when you start `ghci`. Information about Prelude can be found on the [Prelude Hackage page](https://hackage.haskell.org/package/base-4.9.0.0/docs/Prelude.html).

# List Comprehension

a. A positive integer is _perfect_ if it equals the sum of all of its
factors, excluding the number itself. Using a list comprehension, define
a function
``` haskell
  perfects :: Int -> [Int]
  perfects n = undefined
```
that returns the list of all perfect numbers up to a given limit, such that, e.g.:
``` {padding-left:1ex; padding-right:1ex; padding-top:.75ex; padding-bottom:.25ex; background-color:black; color:white; font-size:14pt }
Prelude λ> perfects 500
[6,28,496]
```
answer:
``` haskell
factors' n = [x | x <- [1..n-1], n `mod` x == 0]
perfects n = [x | x <- [1..n], sum (factors' x) == x
```

- The _scalar product_ of two lists of integers `xs` and `ys` of length `n` is
  give by the sum of the products of the corresponding integers:
  ~ Equation
    \sum_{i=0}^{n-1} (xs_i * ys_i)
  ~
  Using a list comprehension, define a function that returns the scalar
  product of two lists. (*Hint: You could start from the following program stub.*)
  ``` Haskell
    scalarProduct :: [Int] -> [Int] -> Int
    scalarProduct xs ys = undefined
  ```
  answer:
  ``` haskell
    scalarproduct :: [Int] -> [Int] -> Int
    scalarproduct xs ys = sum [x * y | (x,y) <- zip xs ys]
```\

I used Programming in Haskell by Graham Hutton as reference as well as lecture slides from class.

[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
